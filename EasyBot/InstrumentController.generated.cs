// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace EasyBot.Controllers
{
    public partial class InstrumentController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public InstrumentController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected InstrumentController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult GetInstrument()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetInstrument);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult GetIntruments()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetIntruments);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult SetInstrumentsSettings()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.SetInstrumentsSettings);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.EmptyResult SubscribeOnHistory()
        {
            return new T4MVC_System_Web_Mvc_EmptyResult(Area, Name, ActionNames.SubscribeOnHistory);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public InstrumentController Actions { get { return MVC.Instrument; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Instrument";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Instrument";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string GetInstrument = "GetInstrument";
            public readonly string GetIntruments = "GetIntruments";
            public readonly string SetInstrumentsSettings = "SetInstrumentsSettings";
            public readonly string SubscribeOnHistory = "SubscribeOnHistory";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string GetInstrument = "GetInstrument";
            public const string GetIntruments = "GetIntruments";
            public const string SetInstrumentsSettings = "SetInstrumentsSettings";
            public const string SubscribeOnHistory = "SubscribeOnHistory";
        }


        static readonly ActionParamsClass_GetInstrument s_params_GetInstrument = new ActionParamsClass_GetInstrument();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetInstrument GetInstrumentParams { get { return s_params_GetInstrument; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetInstrument
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_GetIntruments s_params_GetIntruments = new ActionParamsClass_GetIntruments();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetIntruments GetIntrumentsParams { get { return s_params_GetIntruments; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetIntruments
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_SetInstrumentsSettings s_params_SetInstrumentsSettings = new ActionParamsClass_SetInstrumentsSettings();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SetInstrumentsSettings SetInstrumentsSettingsParams { get { return s_params_SetInstrumentsSettings; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SetInstrumentsSettings
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_SubscribeOnHistory s_params_SubscribeOnHistory = new ActionParamsClass_SubscribeOnHistory();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SubscribeOnHistory SubscribeOnHistoryParams { get { return s_params_SubscribeOnHistory; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SubscribeOnHistory
        {
            public readonly string model = "model";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_InstrumentController : EasyBot.Controllers.InstrumentController
    {
        public T4MVC_InstrumentController() : base(Dummy.Instance) { }

        [NonAction]
        partial void GetInstrumentOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, EasyBot.Models.InstrumentRequestModel model);

        [NonAction]
        public override System.Web.Mvc.JsonResult GetInstrument(EasyBot.Models.InstrumentRequestModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetInstrument);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            GetInstrumentOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void GetIntrumentsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, EasyBot.Models.InstrumentRequestModel model);

        [NonAction]
        public override System.Web.Mvc.JsonResult GetIntruments(EasyBot.Models.InstrumentRequestModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetIntruments);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            GetIntrumentsOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void SetInstrumentsSettingsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, EasyBot.Models.InstrumentsListRequestModel model);

        [NonAction]
        public override System.Web.Mvc.JsonResult SetInstrumentsSettings(EasyBot.Models.InstrumentsListRequestModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.SetInstrumentsSettings);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            SetInstrumentsSettingsOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void SubscribeOnHistoryOverride(T4MVC_System_Web_Mvc_EmptyResult callInfo, EasyBot.Models.InstrumentRequestModel model);

        [NonAction]
        public override System.Web.Mvc.EmptyResult SubscribeOnHistory(EasyBot.Models.InstrumentRequestModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_EmptyResult(Area, Name, ActionNames.SubscribeOnHistory);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            SubscribeOnHistoryOverride(callInfo, model);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
